{"version":3,"sources":["Components/SaveItem.js","App.js","reportWebVitals.js","index.js","Components/SaveItem.module.css"],"names":["SaveItem","date","time","handleRestoreParent","id","styles","container","restore","onClick","App","useState","text","setText","saves","setSaves","pseudo","setPseudo","saveDateTime","setSaveDateTime","useEffect","pastSaves","JSON","parse","localStorage","getItem","textarea","document","getElementsByTagName","placeholder","focus","setItem","stringify","now","Date","getDate","toLocaleString","month","getFullYear","join","hour","minute","hour12","newSaves","push","map","save","index","window","confirm","value","onChange","e","target","lang","Component","element","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"iQAkBeA,EAfE,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBAK5B,OACI,sBAAKC,GAAIC,IAAOC,UAAhB,UACKL,EAAO,IAAMC,EACd,wBAAQE,GAAIC,IAAOE,QACfC,QARU,WAClBL,KAMI,yBC8EGM,EAjFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,OAEYF,mBAAS,IAFrB,mBAEPG,EAFO,KAEAC,EAFA,OAGcJ,mBAAS,GAHvB,mBAGPK,EAHO,KAGCC,EAHD,OAI0BN,mBAAS,gBAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACN,IAAMC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,wBAC9CJ,GACAN,EAASM,KAEd,IAEHD,qBAAU,WACN,IAAIM,EAAWC,SAASC,qBAAqB,YAAY,GACzDF,EAASG,YAAc,oBACvBH,EAASI,UACV,IAEHV,qBAAU,WACNI,aAAaO,QAAQ,sBAAuBT,KAAKU,UAAUlB,MAC5D,CAACE,EAAQF,IAyBZ,OACI,sBAAKT,GAAG,YAAR,UACI,gEACA,wBAAQA,GAAG,OAAOI,QA1BP,WACf,IAAMwB,EAAM,IAAIC,KACVhC,EAAO,CAAC+B,EAAIE,UAAWF,EAAIG,eAAe,UAAW,CAAEC,MAAO,UAAYJ,EAAIK,eAAeC,KAAK,KAClGpC,EAAO8B,EAAIG,eAAe,QAAS,CAAEI,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,IACjFC,EAAW7B,EACjB6B,EAASC,KAAK,CACV1C,KAAMA,EACNC,KAAMA,EACNS,KAAMA,IAEVG,EAAS4B,GACT1B,EAAUD,EAAS,IAef,kBACA,4CACCF,EAAM+B,KAAI,SAACC,EAAMC,GAAP,OACP,cAAC,EAAD,CAEI7C,KAAM4C,EAAK5C,KACXC,KAAM2C,EAAK3C,KACXC,oBAAqB,WACb4C,OAAOC,QAAQ,oEACfpC,EAAQiC,EAAKlC,MACbO,EAAgB2B,EAAK5C,KAAO,IAAM4C,EAAK3C,SAN1C4C,MAWb,cAAC,IAAD,CACIG,MAAOtC,EACPuC,SAAU,SAACC,GAAD,OAAOvC,EAAQuC,EAAEC,OAAOH,QAClCI,KAAK,KACLC,UAAU,aAEd,wBACIlD,GAAG,WACHI,QAnCW,WACnB,IAAM+C,EAAU7B,SAAS8B,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAAC/C,GAAO,CAAEgD,KAAM,eACtCJ,EAAQK,KAAOC,IAAIC,gBAAgBL,GACnCF,EAAQQ,SAAW,QAAU9C,EAC7BS,SAASsC,KAAKC,YAAYV,GAC1BA,EAAQW,SA2BJ,gCAMA,2BCxEGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASqD,eAAe,SAM1BZ,K,kBCfAa,EAAOC,QAAU,CAAC,UAAY,4BAA4B,QAAU,6B","file":"static/js/main.d37de489.chunk.js","sourcesContent":["import React from 'react'\r\nimport styles from './SaveItem.module.css'\r\n\r\nconst SaveItem = ({ date, time, handleRestoreParent }) => {\r\n    const handleRestore = () => {\r\n        handleRestoreParent()\r\n    }\r\n\r\n    return (\r\n        <div id={styles.container}>\r\n            {date + ' ' + time}\r\n            <button id={styles.restore}\r\n                onClick={handleRestore}\r\n            >Restore</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SaveItem","import React, { useEffect, useState } from 'react'\nimport './App.css'\n\nimport { ReactTransliterate } from 'react-transliterate'\nimport 'react-transliterate/dist/index.css'\n\nimport SaveItem from './Components/SaveItem'\n\nconst App = () => {\n    const [text, setText] = useState('');\n    const [saves, setSaves] = useState([])\n    const [pseudo, setPseudo] = useState(0)\n    const [saveDateTime, setSaveDateTime] = useState('New document')\n\n    useEffect(() => {\n        const pastSaves = JSON.parse(localStorage.getItem('transliterate-saves'))\n        if (pastSaves) {\n            setSaves(pastSaves)\n        }\n    }, [])\n\n    useEffect(() => {\n        var textarea = document.getElementsByTagName('textarea')[0]\n        textarea.placeholder = 'Type something...'\n        textarea.focus()\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('transliterate-saves', JSON.stringify(saves))\n    }, [pseudo, saves])\n\n    const handleSave = () => {\n        const now = new Date()\n        const date = [now.getDate(), now.toLocaleString('default', { month: 'short' }), now.getFullYear()].join(' ')\n        const time = now.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n        const newSaves = saves\n        newSaves.push({\n            date: date,\n            time: time,\n            text: text\n        })\n        setSaves(newSaves)\n        setPseudo(pseudo + 1)\n    }\n\n    const handleDownload = () => {\n        const element = document.createElement('a')\n        const file = new Blob([text], { type: 'text/plain' })\n        element.href = URL.createObjectURL(file)\n        element.download = 'Save_' + saveDateTime\n        document.body.appendChild(element)\n        element.click()\n    }\n\n    return (\n        <div id='container'>\n            <h2>English to Hindi Transliterate</h2>\n            <button id='save' onClick={handleSave}>Save</button>\n            <h3>Past Saves</h3>\n            {saves.map((save, index) =>\n                <SaveItem\n                    key={index}\n                    date={save.date}\n                    time={save.time}\n                    handleRestoreParent={() => {\n                        if (window.confirm('Restoring will delete current text if not saved. Are you sure?')) {\n                            setText(save.text)\n                            setSaveDateTime(save.date + '_' + save.time)\n                        }\n                    }}\n                />\n            )}\n            <ReactTransliterate\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                lang='hi'\n                Component='textarea'\n            />\n            <button\n                id='download'\n                onClick={handleDownload}\n            >\n                Download .txt file\n            </button>\n            <br />\n        </div>\n    )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SaveItem_container__1j4TZ\",\"restore\":\"SaveItem_restore__2431h\"};"],"sourceRoot":""}